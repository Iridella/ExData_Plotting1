install.packages("RMySQL")
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb)
result
a<-c(1,2,3,4)
b<-c(5,6,7,8)
c<-cbind(a,b)
c
c<-c(2,2,4,4)
d<-c(3,3,3,5)
e<-cbind(a,b,c,d)
e
aggregate(e, list(e[,3],e[,4]), mean)
f<-aggregate(e, list(e[,3],e[,4]), mean)
f
f<-f[,c(3:length(f))]
f
e<-rbind2(e,c(3,5,4,5))
e<-rbind2(e,c(3,5,4,5))
e
f<-aggregate(e, list(e[,3],e[,4]), mean)
ff
f
activity_labels <- read.table("activity_labels.txt")
features <- read.table("features.txt")
X_test <- read.table("test/X_test.txt")
names(X_test) = features[,2]
Y_test <- read.table("test/Y_test.txt")
names(Y_test) <- "activity"
subject_test <- read.table("test/subject_test.txt")
names(subject_test) <- "subject"
test <-cbind(subject_test, Y_test, X_test)
X_train <- read.table("train/X_train.txt")
names(X_train) = features[,2]
Y_train <- read.table("train/Y_train.txt")
names(Y_train) <- "activity"
subject_train <- read.table("train/subject_train.txt")
names(subject_train) <- "subject"
train <-cbind(subject_train, Y_train, X_train)
data <- rbind(test,train)
############################################################################################
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
############################################################################################
columns <- grepl("mean|std", names(data))
data_subset <- data[,columns]
data_subset <- cbind(data[1:2],data_subset)
###########################################################################
# 3. Uses descriptive activity names to name the activities in the data set
###########################################################################
data_subset[,2] <- activity_labels[,2][data_subset[,2]]
tidydataset1 <- data_subset
######################################################################################
# 5. From the data set in step 4, creates a second, independent tidy data set with the
# average of each variable for each activity and each subject.
######################################################################################
###controllare!!!!
tidydataset2 <- aggregate(x=data_subset, by=list(subject=data_subset[,1],activity=data_subset[,2]), FUN="mean")
tidydataset2 <- tidydataset2[,c(1,2,5:length(tidydataset2))]
write.table(tidydataset2, "tidydata_step5.txt",row.name=FALSE)
setwd("/Volumes/IIT/IIT/COURSERA/GettingAndCleaningData/CourseProject/UCI HAR Dataset")
activity_labels <- read.table("activity_labels.txt")
features <- read.table("features.txt")
X_test <- read.table("test/X_test.txt")
names(X_test) = features[,2]
Y_test <- read.table("test/Y_test.txt")
names(Y_test) <- "activity"
subject_test <- read.table("test/subject_test.txt")
names(subject_test) <- "subject"
test <-cbind(subject_test, Y_test, X_test)
X_train <- read.table("train/X_train.txt")
names(X_train) = features[,2]
Y_train <- read.table("train/Y_train.txt")
names(Y_train) <- "activity"
subject_train <- read.table("train/subject_train.txt")
names(subject_train) <- "subject"
train <-cbind(subject_train, Y_train, X_train)
data <- rbind(test,train)
############################################################################################
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
############################################################################################
columns <- grepl("mean|std", names(data))
data_subset <- data[,columns]
data_subset <- cbind(data[1:2],data_subset)
###########################################################################
# 3. Uses descriptive activity names to name the activities in the data set
###########################################################################
data_subset[,2] <- activity_labels[,2][data_subset[,2]]
tidydataset1 <- data_subset
######################################################################################
# 5. From the data set in step 4, creates a second, independent tidy data set with the
# average of each variable for each activity and each subject.
######################################################################################
###controllare!!!!
tidydataset2 <- aggregate(x=data_subset, by=list(subject=data_subset[,1],activity=data_subset[,2]), FUN="mean")
tidydataset2 <- tidydataset2[,c(1,2,5:length(tidydataset2))]
write.table(tidydataset2, "tidydata_step5.txt",row.name=FALSE)
a<-read.table("tidydata_step5.txt")
View(tidydataset2)
View(a)
data_dir<-"Dataset"
read.table(c(data_dir, "test/subject_test.txt"))
ls
getwd()
cd ..
cd..
setwd("../")
cd..
getwd()
read.table(c(data_dir, "test/subject_test.txt"))
d<-c(data_dir, "test/subject_test.txt")
d
paste(data_dir, "test/subject_test.txt")
paste(data_dir, "test/subject_test.txt", sep="")
?plot
setwd("/Volumes/IIT/IIT/COURSERA/ExploratoryDataAnalysis")
setwd("/Volumes/IIT/IIT/COURSERA/ExploratoryDataAnalysis/CourseProject1")
source("plot2.R")
read_data("../household_power_consumption.txt")
data<-read_data("../household_power_consumption.txt")
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", xlim=c("Thu","Sat"), ylim=c(0,6))
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", xlim=c(0,3), ylim=c(0,6))
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", xlim=c(0,3), ylim=c(0,6), asp=1)
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", ylim=c(0,6), asp=1)
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", asp=1)
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", asp=2)
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", asp=0.5)
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", asp=0.05)
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", asp=1)
View(data)
plot(data$Global_active_power/1000, type="l", xlab="", ylab="Global Active Power (kilowatts)", asp=1)
plot(data$Global_active_power/1000, type="l", xlab="", ylab="Global Active Power (kilowatts)")
plot(data$Global_active_power/500, type="l", xlab="", ylab="Global Active Power (kilowatts)")
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", xlim=v("Thu","Sat"), ylim=c(0,6))
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxs="i")
plot(data$Global_active_power/500, type="l", xlab="", ylab="Global Active Power (kilowatts)", axes=FALSE)
box
box()
axis(1, c("Thu","Fri","Sat"))
axis(1, c(0,3))
axis(1, c("Thu","Fri","Sat"))
axis(1, c(0,2500),c("Thu","Fri","Sat"))
?axis
axis(1, labels("Thu","Fri","Sat"))
plot(data$Global_active_power~data$Date, type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxs="i")
plot(data$Global_active_power~data$Date, type="l", xlab="", ylab="Global Active Power (kilowatts)")
plot(data$Global_active_power ~ data$Date, type="l", xlab="", ylab="Global Active Power (kilowatts)")
plot(data$Global_active_power ~ , type="l", xlab="", ylab="Global Active Power (kilowatts)")
plot(data$Global_active_power ~ data$Time , type="l", xlab="", ylab="Global Active Power (kilowatts)")
plot(data$Global_active_power ~ as.POSIXct(data$Date), type="l", xlab="", ylab="Global Active Power (kilowatts)")
